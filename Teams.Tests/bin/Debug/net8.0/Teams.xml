<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Teams</name>
    </assembly>
    <members>
        <member name="M:Teams.API.Layer.Common.ValidateModelAttribute.NormalizeErrorMessage(System.String,System.String)">
            <summary>
            Manage error messages on json body structure
            </summary>
            <item><description>Sent back error message when request body contains invalid property.</description></item>
            <item><description>Sent back error message when json body structure is malformed.</description></item>
            <item><description>Sent back error message when json body structure lack some requiring field.</description></item>
            <param name="rawMessage"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetAllTeams(System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Retrieves all teams in the system.
             </summary>
             <remarks>
             This endpoint allows you to get a list of all teams, including their details such as team name, members, and team manager.
             
             **Authorization:** Not required by default, but can be restricted to specific roles such as "Admin" or "Manager".
             
             **Query Parameters:**
             - `onlyMature` (bool, optional): If true, only mature teams will be returned.
            
             **Example usage:**
             ```http
             GET /teams?onlyMature=true
             ```
            
             **Response:**
             - 200 OK: Returns a list of `TeamDto` objects. If no teams are found, an empty list is returned.
             </remarks>
             <param name="onlyMature">Filter to return only mature teams (optional)</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>List of teams as `TeamDto`</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetTeam(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Retrieves a team by its unique identifier.
             </summary>
             <remarks>
             This endpoint allows you to get the details of a specific team, including its name, members, and team manager.
            
             **Authorization:** Not required by default, but can be restricted to specific roles such as "Admin" or "Manager".
            
             **Route Parameters:**
             - `teamId` (GUID): The unique identifier of the team to retrieve.
            
             **Example usage:**
             ```http
             GET /teams/{teamId}
             ```
            
             **Responses:**
             - 200 OK: Returns the team details as `TeamDetailsDto`.
             - 404 Not Found: The team with the specified ID does not exist.
             </remarks>
             <param name="teamId">The unique identifier of the team to retrieve</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>The details of the requested team as `TeamDetailsDto`</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetTeamStats(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Retrieves statistics for a specific team.
             </summary>
             <remarks>
             This endpoint returns various statistics related to a team, such as the number of members, active projects, or other metrics.
            
             **Query Parameters:**
             - `teamId` (GUID, required): The unique identifier of the team for which stats are requested.
            
             **Example usage:**
             ```http
             GET /teams/stats?teamId=123e4567-e89b-12d3-a456-426614174000
             ```
            
             **Responses:**
             - 200 OK: Returns the team statistics as `TeamStatsDto`.
             - 404 Not Found: The team with the specified ID does not exist.
             </remarks>
             <param name="teamId">The unique identifier of the team</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>The statistics of the requested team as `TeamStatsDto`</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetTeamsByManagerId(System.Guid,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Retrieves all teams managed by a specific manager.
             </summary>
             <remarks>
             This endpoint returns a list of teams based on the manager's ID. Optionally, it can include the members of those teams.
            
             **Query Parameters:**
             - `managerId` (GUID, required): The unique identifier of the manager.
             - `includeMembers` (bool, optional, default = false): If true, include team members in the response.
            
             **Responses:**
             - 200 OK: Returns a list of teams as `TeamDto`.
             - 404 Not Found: No teams were found for the given manager ID.
            
             **Example usage:**
             ```http
             GET /teams/manager?managerId=123e4567-e89b-12d3-a456-426614174000%includeMembers=true
             ```
             This will return all teams managed by the specified manager.
             </remarks>
             <param name="managerId">The unique identifier of the manager</param>
             <param name="includeMembers">Whether to include team members in the response</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>List of teams managed by the specified manager</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.ChangeTeamManager(Teams.APP.Layer.CQRS.Commands.UpdateTeamManagerCommand,System.Threading.CancellationToken)">
             <summary>
             Changes the team manager for a specific team.
             </summary>
             <remarks>
             This endpoint allows updating the team manager for a team identified by its name and the current manager's ID.
            
             **Request Body:**
             ```json
             {
                "Name": "Pentester",
                "OldTeamManagerId": "b14db1e2-026e-4ac9-9739-378720de6f5b",
                "NewTeamManagerId": "9a57d8f7-56f4-47d9-a429-5f4f34e9bc83",
                "ContratType": "Stagiaire"
             }
             ```
             
             **Responses:**
             - 204 No Content: The team manager has been successfully changed.
             - 400 Bad Request: Validation errors in the request body.
             - 404 Not Found: The team with the specified name and current manager ID does not exist.
             - 500 Internal Server Error: Unexpected server error.
            
             **Authorization:** Required, typically restricted to "Admin" or "Manager".
             </remarks>
             <param name="command">The update command containing team name, old manager ID, new manager ID, and contract type.</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>No content if successful; otherwise, appropriate error response.</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetTeamsByMemberId(System.Guid,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Retrieves all teams that a specific member is part of.
             </summary>
             <remarks>
             This endpoint returns a list of teams based on the member's unique identifier (`memberId`).
             
             **Query Parameters:**
             - `memberId` (Guid): Unique identifier of the member.
             - `includeMembers` (bool): If true, includes members of each team; otherwise, only team details are returned.
            
             **Responses:**
             - 200 OK: Returns a list of teams the member is part of.
             - 404 Not Found: No teams found for the given member ID.
            
             **Example usage:**
             GET /teams/member?memberId=123e4567-e89b-12d3-a456-426614174000%includeMembers=true
             
             This returns all teams that the member with ID `123e4567-e89b-12d3-a456-426614174000` belongs to.
            
             **Authorization:** Optional; can be restricted to "Admin" or "Manager".
             </remarks>
             <param name="memberId">Unique identifier of the member</param>
             <param name="includeMembers">Whether to include team members in the response</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>List of teams the member is part of</returns>
             [Authorize(Roles = "Admin,Manager(responsable d'Ã©quipe)")]
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.AddTeamMember(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Adds a new member to a team.
             </summary>
             <remarks>
             This endpoint allows an administrator or team manager to add a new member to a specific team.
            
             **Query Parameters:**
             - `memberId` (Guid): Unique identifier of the member to be added.
            
             **Responses:**
             - 204 No Content: The member was successfully added to the team.
             - 400 Bad Request: The `memberId` is empty or invalid.
             - 404 Not Found: The member with the specified ID does not exist or cannot be found in any team.
             - 500 Internal Server Error: Unexpected server error.
            
             **Example usage:**
             PATCH /teams/member?memberId=123e4567-e89b-12d3-a456-426614174000
            
             **Authorization:** Required for "Admin" or "Manager" roles.
             </remarks>
             <param name="memberId">Unique identifier of the member to add</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>No content if successful</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.CreateTeam(Teams.APP.Layer.CQRS.Commands.CreateTeamCommand,System.Threading.CancellationToken)">
             <summary>
             Creates a new team.
             </summary>
             <remarks>
             This endpoint allows an administrator or team manager to create a new team in the system.
            
             **Request Body:**
             ```json
             {
               "Name": "Development Team",
               "TeamManagerId": "123e4567-e89b-12d3-a456-426614174002",
               "MembersIds": [
                 "123e4567-e89b-12d3-a456-426614174000",
                 "123e4567-e89b-12d3-a456-426614174001",
                 "123e4567-e89b-12d3-a456-426614174002"
               ]
             }
             ```
            
             **Responses:**
             - 201 Created: Returns the created team details.
             - 400 Bad Request: The request data is invalid.
            
             **Authorization:** Required for "Admin" or "Manager" roles.
            
             **Example usage:**
             POST /teams
             </remarks>
             <param name="command">The details of the team to create</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>The created team</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.UpdateTeamById(System.Guid,Teams.APP.Layer.CQRS.Commands.UpdateTeamCommand,System.Threading.CancellationToken)">
             <summary>
             Updates an existing team by its unique identifier.
             </summary>
             <remarks>
             This endpoint allows an administrator or team manager to modify the details of a specific team.
            
             **Request Body:**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174000",
               "name": "Updated Team Name",
               "memberId": [
                 "123e4567-e89b-12d3-a456-426614174001",
                 "123e4567-e89b-12d3-a456-426614174002"
               ],
               "teamManagerId": "123e4567-e89b-12d3-a456-426614174003"
             }
             ```
            
             **Responses:**
             - 200 OK: Returns the updated team details.
             - 400 Bad Request: Validation failed or teamId mismatch between URL and body.
             - 404 Not Found: Team with the specified ID does not exist.
            
             **Authorization:** Required for "Admin" or "Manager" roles.
            
             **Example usage:**
             PUT /teams/{teamId}
             </remarks>
             <param name="teamId">The unique identifier of the team to update</param>
             <param name="command">Updated team details</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>The updated team</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.DeleteTeamMemberById(Teams.API.Layer.DTOs.DeleteTeamMemberDto,System.Threading.CancellationToken)">
             <summary>
             Deletes a team member from a specific team.
             </summary>
             <remarks>
             This endpoint allows an administrator or team manager to remove a member from a specific team.
            
             **Request Body:**
             ```json
             {
               "memberId": "123e4567-e89b-12d3-a456-426614174000",
               "teamName": "Development Team"
             }
             ```
            
             **Responses:**
             - 204 No Content: Member was successfully removed.
             - 400 Bad Request: Request data is null or team name is missing.
             - 404 Not Found: Member not found in the specified team.
            
             **Authorization:** Required for "Admin" or "Manager" roles.
            
             **Example usage:**
             DELETE /teams/member
             </remarks>
             <param name="deleteTeamMemberDto">DTO containing memberId and teamName</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>No content</returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.DeleteTeam(System.Guid,System.Threading.CancellationToken)">
             <summary>
             Deletes a team by its unique identifier.
             </summary>
             <remarks>
             This endpoint allows an administrator to remove a team from the system.
            
             **Responses:**
             - 204 No Content: Team successfully deleted.
             - 404 Not Found: Team with the specified ID does not exist.
            
             **Authorization:** Required for "Admin" role.
            
             **Example usage:**
             DELETE /teams/{teamId}
             where `{teamId}` is the unique identifier of the team to be deleted.
             </remarks>
             <param name="teamId">Unique identifier of the team to delete</param>
             <param name="cancellationToken">Cancellation token</param>
             <returns>No content</returns>
        </member>
        <member name="P:Teams.APP.Layer.CQRS.Queries.GetAllTeamsQuery.Id">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetAllTeamsQuery"/> class.
            </summary>
            <remarks>
            This constructor is parameterless and is used for deserialization purposes.
            It allows the MediatR library to create instances of this query without requiring any parameters.
            </remarks>
        </member>
        <member name="P:Teams.APP.Layer.CQRS.Queries.GetAllTeamsQuery.OnlyMature">
            <summary>
            Si true, ne renvoie que les Ã©quipes matures
            </summary>
        </member>
        <member name="M:Teams.APP.Layer.CQRS.Queries.GetTeamQuery.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetTeamQuery"/> class with the specified team identifier.
            </summary>
            <param name="identifier">The unique identifier of the team to retrieve.</param>
        </member>
        <member name="M:Teams.APP.Layer.CQRS.Queries.GetTeamsByManagerQuery.#ctor(System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetTeamsByManagerQuery"/> class with the specified team identifier.
            </summary>
            <param name="TeamManagerId">The unique identifier of the team manager to retrieve.</param>
            <param name="includeMembers">Whether to include team members in the result.</param>
        </member>
        <member name="M:Teams.APP.Layer.CQRS.Queries.GetTeamsByMemberQuery.#ctor(System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetTeamsByMemberQuery"/> class with the specified team identifier.
            </summary>
            <param name="MemberId">The unique identifier of the team manager to retrieve.</param>
            <param name="includeMembers">Whether to include team members in the result.</param>
        </member>
        <member name="T:Teams.APP.Layer.Exceptions.ServicesException">
            <summary>
            Exception levÃ©e lors de dÃ©faillances techniques ou d'intÃ©gration (ex: service externe, infra).
            </summary>
        </member>
        <member name="M:Teams.APP.Layer.Exceptions.ServicesException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructeur simplifiÃ© par dÃ©faut (status = 400)
            </summary>
        </member>
        <member name="M:Teams.APP.Layer.Exceptions.ServicesException.#ctor(System.String,System.String)">
            <summary>
            Exception spÃ©cifique Ã  l'indisponibilitÃ© d'un service externe.
            </summary>
        </member>
        <member name="T:Teams.APP.Layer.Scheldulers.Services.TeamLifecycleScheduler">
            <summary>
            Scheduler to manage team lifecycle events such as maturity and expiration.
            1. Checks for team maturity and expiration at scheduled intervals.
                - Maturity is determined by a predefined duration since team creation.
                - Expiration is based on the team's expiration date.
            2. Archives teams that have expired and have no active dependencies.
            3. Reschedules the next check based on the nearest upcoming maturity or expiration date.
               Uses a Timer to trigger checks and ensures thread safety with locking.
               Logs key actions and errors for monitoring and debugging.
               Designed to be started and stopped as a hosted service within the application.
               Interacts with the team repository and caching services to manage team states.
               Note: Time intervals are shortened for testing purposes; adjust as needed for production.
            </summary>
        </member>
        <member name="M:Teams.APP.Layer.Scheldulers.Services.TeamLifecycleScheduler.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Teams.INFRA.Layer.Dispatchers.IDomainEventDispatcher,AutoMapper.IMapper,Teams.CORE.Layer.CoreServices.TeamLifecycleDomainService,Microsoft.Extensions.Logging.ILogger{Teams.APP.Layer.Scheldulers.Services.TeamLifecycleScheduler})">
            <summary>
            Scheduler to manage team lifecycle events such as maturity and expiration.
            1. Checks for team maturity and expiration at scheduled intervals.
                - Maturity is determined by a predefined duration since team creation.
                - Expiration is based on the team's expiration date.
            2. Archives teams that have expired and have no active dependencies.
            3. Reschedules the next check based on the nearest upcoming maturity or expiration date.
               Uses a Timer to trigger checks and ensures thread safety with locking.
               Logs key actions and errors for monitoring and debugging.
               Designed to be started and stopped as a hosted service within the application.
               Interacts with the team repository and caching services to manage team states.
               Note: Time intervals are shortened for testing purposes; adjust as needed for production.
            </summary>
        </member>
        <member name="T:Teams.CORE.Layer.Entities.GeneralValueObjects.VoState">
            <summary>
            Statut d'un projet venant d'un service externe
            Active = 0       : Projet actif dans le microservice de projets
            Suspended = 1    : Projet suspendu dans le microsevice de projets
            </summary>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.GeneralValueObjects.Detail.#ctor">
            <summary>
            Constructor for EF Core
            This constructor is required by Entity Framework Core for materialization.
            It should not be used directly in application code.
            </summary>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.GeneralValueObjects.Detail.#ctor(System.String,System.DateTime,System.DateTime,Teams.CORE.Layer.Entities.GeneralValueObjects.VoState)">
            <summary>
            Domain constructor for Detail value object 
            This constructor enforces domain rules and validations.
            </summary>
            <param name="projectName"></param>
            <param name="projectStartDate"></param>
            <param name="projectEndDate"></param>
            <param name="state"></param>
        </member>
        <member name="T:Teams.CORE.Layer.Entities.GeneralValueObjects.ProjectAssignmentState">
            <summary>
            Statut d'affectation projet d'une Ã©quipe
            Unaffected = 0,           : Aucune affectation projet
            Assigned = 1,             : Projet en cours
            Suspended = 2,            : Projet(s) associÃ©(s) suspendu(s)
            UnderReview = 3,          : Projet en cours dâÃ©valuation pour rÃ©affectation
            UnassignedAfterReview = 4 : Ãquipe restÃ©e sans projet aprÃ¨s rÃ©vision
            </summary>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.GeneralValueObjects.ProjectAssociation.#ctor(System.Guid,System.String,System.Collections.Generic.List{Teams.CORE.Layer.Entities.GeneralValueObjects.Detail})">
            <summary>
            Domain constructor for ProjectAssociation
            </summary>
            <param name="teamManagerId">The ID of the team manager</param>
            <param name="teamName">The name of the team</param>
            <param name="details">The list of project details</param>
            <remarks>
            This constructor enforces domain rules and validations.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.GeneralValueObjects.ProjectAssociation.#ctor">
            <summary>
            Constructor for EF Core
            This constructor is required by Entity Framework Core for materialization.
            It should not be used directly in application code.
            </summary>
        </member>
        <member name="P:Teams.CORE.Layer.Entities.GeneralValueObjects.ProjectAssociation.ComputedProjectState">
            <summary>
            Get the computed project assignment state based on current details. 
            </summary>
            <returns></returns>
            <remarks>
            This property evaluates the current state of the project association
            based on the details provided. It considers various conditions such as
            whether there are active or suspended projects, if the project is under review,
            or if it has expired. The logic ensures that the most relevant state is returned
            based on the current context of the project association.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.GeneralValueObjects.ProjectAssociation.RemoveExpiredDetails">
            <summary>
            Remove details of projects that have expired.
            This method checks for any project details where the end date has passed
            and removes them from the association.
            </summary>
                <remarks>
            This method helps maintain the integrity of the project association
            by ensuring that only active or relevant project details are retained.
            It should be called periodically or after certain operations to clean up
            expired project details.
            </remarks>
        </member>
        <member name="T:Teams.CORE.Layer.Entities.TeamAggregate.TeamState">
            <summary>
            Team state definitions:
            Draft= 0    : Ãquipe en cours de crÃ©ation (moins de 3 membres ou pas de manager)
            Active= 1   : Ãquipe valide (â¥ 3 membres + 1 manager)
            Archived= 2 : Ãquipe inactive ou restÃ©e non valide aprÃ¨s un certain dÃ©lai
            </summary>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.#ctor">
            <summary>
            Constructeur pour Entity Framework Core
            NÃ©cessaire pour la matÃ©rialisation par EF Core
            </summary>
            <remarks>
            Ce constructeur est requis par Entity Framework Core pour la matÃ©rialisation.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.#ctor(System.Guid,System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.DateTime)">
            <summary>
            Constructeur privÃ© pour forcer l'utilisation de la mÃ©thode factory Create.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="teamManagerId"></param>
            <param name="members"></param>
            <param name="creationDate"></param>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
            <returns></returns>
            <remarks>
            Le constructeur initialise les propriÃ©tÃ©s de l'Ã©quipe, y compris la date d'expiration basÃ©e
            Sur la date de crÃ©ation et la pÃ©riode de validitÃ© standard.
            La validation des donnÃ©es de l'Ã©quipe est effectuÃ©e via la mÃ©thode ValidateTeamData.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.GetCommonMembersStats(System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{Teams.CORE.Layer.Entities.TeamAggregate.Team})">
            <summary>
            Calculates the maximum percentage of common members between a new team and a collection of existing teams.
            </summary>
            <param name="newTeamMembers">The list of members (as <see cref="T:System.Guid"/>) for the new team being created.</param>
            <param name="existingTeams">The collection of existing teams to compare against.</param>
            <returns>
            A <see cref="T:System.Double"/> representing the highest percentage of overlap in members 
            between the new team and any existing team. Returns 0 if no existing teams are provided.
            </returns>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException">
            Thrown when <paramref name="newTeamMembers"/> is null or contains fewer than two members.
            </exception>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.Create(System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{Teams.CORE.Layer.Entities.TeamAggregate.Team})">
            <summary>
            Factory method to create a new <see cref="T:Teams.CORE.Layer.Entities.TeamAggregate.Team"/> while enforcing domain invariants.
            </summary>
            <param name="name">The unique name of the team to be created.</param>
            <param name="teamManagerId">The identifier of the team manager.</param>
            <param name="memberIds">The collection of member identifiers to include in the team.</param>
            <param name="teams">The collection of existing teams used for validation checks.</param>
            <returns>A newly created and valid <see cref="T:Teams.CORE.Layer.Entities.TeamAggregate.Team"/> instance.</returns>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException">
            Thrown when:
            <list type="bullet">
            <item><description> A team with the same name already exists. </description></item>
            <item><description> The manager already manages more than 3 teams. </description></item>
            <item><description> A team with the exact same members and manager already exists. </description></item>
            <item><description> The new team shares more than 50% of its members with an existing team. </description></item>
            </list>
            </exception>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.UpdateTeam(System.String,System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Update team details: name, manager, members.
            Cannot update an expired team.
            Validates changes and recalculates team state.
            </summary>
            <param name="newName"></param>
            <param name="newManagerId"></param>
            <param name="newMemberIds"></param>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
        </member>
        <member name="P:Teams.CORE.Layer.Entities.TeamAggregate.Team.ComputedTeamState">
            <summary>
            Compute the current state of the team based on its members and expiration.
            Draft if less than 3 members or no manager.
            Archived if past expiration date.
            Active otherwise.
            </summary>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.RecalculateStates">
            <summary>
            Recalculate and update the team's state and project state.
            This method should be called after any operation that modifies the team's members,
            manager, or project association to ensure the states are accurate.
            </summary>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.HasAnyDependencies">
            <summary>
            Verify if the team has any active or suspended project dependencies.
            if there are active projects, extend the team's expiration date accordingly.
            If there are no dependencies, return false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.IsMature">
            <summary>
            Determine if the team is mature based on its creation date and maturity threshold.
            Only active teams can be evaluated for maturity.
            Maturity is defined as having existed for at least the maturity threshold duration.
            An exception is thrown if the team is not active.
            </summary>
            <returns></returns>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.ArchiveTeam">
            <summary>
            Archive the team if it has exceeded its validity period.
            Only teams that are past their expiration date can be archived.
            An exception is thrown if the team is not yet eligible for archiving.
            </summary>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
            <remarks>
            Archiving a team changes its state to Archived.
            This action is irreversible and should be performed with caution.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.ValidateTeamInvariants">
            <summary>
            Validate team invariants:
            - At least 3 members including the manager.
            - No more than 10 members.
            - Unique members.
            - Manager must be a member.
            Throws DomainException if any invariant is violated.
            </summary>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
            <remarks>
            This method is called during team creation and updates to ensure the team remains valid.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.AssignProject(Teams.CORE.Layer.Entities.GeneralValueObjects.ProjectAssociation)">
            <summary>
            Assign a project to the team.
            Validates project details and updates team expiration if necessary.
            Throws DomainException if any validation fails.
            </summary>
            <param name="project"></param>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
            <remarks>
            This method ensures that the project is valid and aligns with the team's creation date and manager.
            It also extends the team's expiration date based on the project's start date.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.RemoveExpiredProjects">
            <summary>
            Remove expired projects from the team.
            Updates team state and triggers domain event if necessary.
            </summary>
            <remarks>
            This method checks the project's details and removes any that have expired.
            It then recalculates the team's state and triggers a domain event to notify of the change.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.RemoveSuspendedProjects(System.String)">
            <summary>
            Remove suspended projects from the team by project name.
            Updates team state and triggers domain event if necessary.
            </summary>
            <param name="projectName"></param>
            <remarks>
            This method checks the project's details and removes any that are marked as suspended.
            It then recalculates the team's state and triggers a domain event to notify of the change.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.AddMember(System.Guid)">
            <summary>
            Add a new member to the team.
            Validates that the member is not already in the team, that the team does not exceed
            the maximum number of members, and that the member being added is not the manager.
            Throws DomainException if any validation fails.
            </summary>
            <param name="memberId"></param>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
            <remarks>
            This method ensures that the team remains valid after adding a new member.
            It also triggers a domain event to notify of the member addition.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.RemoveMemberSafely(System.Guid)">
            <summary>
            Remove a member from the team.
            Validates that the member exists in the team, that the member being removed is not  the manager,
            and that the team does not fall below the minimum number of members.
            Throws DomainException if any validation fails.
            </summary>
            <param name="memberId"></param>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
            <remarks>
            This method ensures that the team remains valid after removing a member.
            It also triggers a domain event to notify of the member removal.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.ChangeTeamManager(System.Guid)">
            <summary>
            Change the team manager to a new member.
            Validates that the new manager is a member of the team and not an empty GUID
            Throws DomainException if any validation fails.
            </summary>
            <param name="newManagerId"></param>
            <exception cref="T:Teams.CORE.Layer.BusinessExceptions.DomainException"></exception>
            <remarks>
            This method updates the team manager and triggers a domain event to notify of the change.
            It also recalculates the team's state to ensure it remains valid.
            </remarks>
        </member>
        <member name="M:Teams.CORE.Layer.Entities.TeamAggregate.Team.GetLocalDateTime">
            <summary>
            Get the current local date and time.
            </summary>
            <returns></returns>
            <remarks>
            This method ensures that all date and time operations within the Team entity
            are based on the local time zone, promoting consistency across the application.
            </remarks>
        </member>
        <member name="T:Teams.INFRA.Layer.ExternalServices.RabbitListenerService">
            <summary>
            RabbitMQ listener service
            1. Connects to RabbitMQ and listens for messages on a specified queue.
            2. Processes messages to handle team member additions/removals and project associations.
            3. Uses regex to parse messages and extract relevant information.
            4. Interacts with a background job service to schedule tasks based on message content.
            5. Implements error handling and logging for monitoring and debugging.
            6. Designed to run as a hosted background service within the application.
              Note: Ensure RabbitMQ server is accessible and the queue is properly configured.
             Connection details are sourced from configuration settings.
            </summary>
            <param name="log"></param>
            <param name="configuration"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Teams.INFRA.Layer.ExternalServices.RabbitListenerService.#ctor(Microsoft.Extensions.Logging.ILogger{Teams.INFRA.Layer.ExternalServices.RabbitListenerService},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            RabbitMQ listener service
            1. Connects to RabbitMQ and listens for messages on a specified queue.
            2. Processes messages to handle team member additions/removals and project associations.
            3. Uses regex to parse messages and extract relevant information.
            4. Interacts with a background job service to schedule tasks based on message content.
            5. Implements error handling and logging for monitoring and debugging.
            6. Designed to run as a hosted background service within the application.
              Note: Ensure RabbitMQ server is accessible and the queue is properly configured.
             Connection details are sourced from configuration settings.
            </summary>
            <param name="log"></param>
            <param name="configuration"></param>
            <param name="scopeFactory"></param>
        </member>
        <member name="M:Teams.INFRA.Layer.ExternalServices.RabbitListenerService.GuidAndTeamRegex">
            <remarks>
            Pattern:<br/>
            <code>\\|\\s*([\\da-f]{8}(-[\\da-f]{4}){3}-[\\da-f]{12})\\s*\\|\\s*(.+)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            â Match '|'.<br/>
            â Match a whitespace character greedily any number of times.<br/>
            â 1st capture group.<br/>
                â Match a character in the set [A-Fa-f\d] exactly 8 times.<br/>
                â Loop exactly 3 times.<br/>
                    â 2nd capture group.<br/>
                        â Match '-'.<br/>
                        â Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
                â Match '-'.<br/>
                â Match a character in the set [A-Fa-f\d] exactly 12 times.<br/>
            â Match a whitespace character atomically any number of times.<br/>
            â Match '|'.<br/>
            â Match a whitespace character greedily any number of times.<br/>
            â 3rd capture group.<br/>
                â Match a character other than '\n' atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Teams.INFRA.Layer.ExternalServices.RedisCacheService.GetArchivedTeamFromRedisAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieves an archived team from Redis cache using the team's ID.
            If the data is found in the cache, it is deserialized into a `Team` object.
            </summary>
            <param name="teamId">The unique identifier of the team to retrieve.</param>
            <param name="cancellationToken">The cancellation token to handle task cancellation.</param>
            <returns>A `Team` object representing the archived team retrieved from Redis.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if deserialization fails or if the resulting team object is null.</exception>
        </member>
        <member name="T:Teams.INFRA.Layer.ExternalServices.TeamExternalService">
               A terme on aura plus besoin | les messages du serveur de messageries devront contenir toutes les infos necessaires
            *
        </member>
        <member name="M:Teams.INFRA.Layer.ExternalServices.TeamExternalService.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{Teams.INFRA.Layer.ExternalServices.TeamExternalService})">
               A terme on aura plus besoin | les messages du serveur de messageries devront contenir toutes les infos necessaires
            *
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GuidAndTeamRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
