<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Teams</name>
    </assembly>
    <members>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetAllTeams">
            <summary>
            Retrieves all teams in the system.
            This endpoint allows you to get a list of all teams, including their details such as
            team name, members, and team manager.
            If no teams are found, an empty list will be returned.
            This endpoint is useful for administrators or managers to view all teams in the system.
            Authorization is not required for this endpoint, but it can be restricted to specific roles
            such as "Admin" or "Manager" if needed.
            Example usage:
            GET /teams
            This will return a list of all teams in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetTeam(System.Guid)">
            <summary>
            Retrieves a team by its unique identifier.
            This endpoint allows you to get the details of a specific team based on its ID.
            If the team with the specified ID does not exist, a 404 Not Found response will be returned.
            If the team is found, a 200 OK response with the team details will be returned.
            This endpoint is useful for retrieving information about a specific team, such as its name,
            members, and team manager.
            Authorization is not required for this endpoint, but it can be restricted to specific roles
            such as "Admin" or "Manager" if needed.
            Example usage:
            GET /teams/{teamId}
            where `{teamId}` is the unique identifier of the team you want to retrieve.
            </summary>
            <param name="teamId"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetTeamsByManagerId(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
             Retrieve all teams managed by a specific manager.
             This endpoint allows you to get a list of teams based on the manager's ID
             and optionally include the members of those teams.
             If `includeMembers` is set to true, the response will include the members of each team.
             If `includeMembers` is false, the response will only include the team details without member information.
             If no teams are found for the given manager ID,
             a 404 Not Found response will be returned.
             This endpoint is useful for managers to view the teams they oversee and their members.
             It can also be used by administrators to manage teams based on their managers.
             Authorization is not required for this endpoint, but it can be restricted to specific roles
             such as "Admin" or "Manager" if needed.
             Example usage:
             GET /teams/manager?managerId=123e4567-e89b-12d3-a456-426614174000&amp;includeMembers=true
             This will return a list of teams managed by the manager with ID `123e4567-e89b-12d3-a456-426614174000`.
            </summary>
            <param name="managerId"></param>
            <param name="includeMembers"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.ChangeTeamManager(Teams.APP.Layer.CQRS.Commands.UpdateTeamManagerCommand,System.Threading.CancellationToken)">
            <summary>
            Changes the team manager for a specific team.
            This endpoint allows you to change the team manager for a specific team identified by its name
            and the ID of the current team manager.
            If the team with the specified name and current manager ID does not exist, a 404 Not Found response will be returned.
            If the change is successful, a 204 No Content response will be returned.
            This endpoint is useful for updating team management responsibilities, such as when a team manager leaves or is replaced.
            Authorization is required for this endpoint, typically restricted to users with the "Admin" or "Manager" role.
            Example usage:
            PATCH /teams/manager
            {
               "Name": "Pentester",
               "OldTeamManagerId": "b14db1e2-026e-4ac9-9739-378720de6f5b",
               "NewTeamManagerId": "9a57d8f7-56f4-47d9-a429-5f4f34e9bc83"
            }
            The request body should contain the team name, the ID of the current team manager,
            and the ID of the new team manager.
            The `newTeamManagerId` should be a valid user ID of a user who will become the new team manager.
            If the request is successful, a 204 No Content response will be returned,
            indicating that the team manager has been successfully changed.
            If the request fails due to validation errors, a 400 Bad Request response will be returned
            with details about the validation errors.
            If the team is not found, a 404 Not Found response will be returned.
            If an unexpected error occurs, a 500 Internal Server Error response will be returned.
            </summary>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.GetTeamsByMemberId(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves all teams that a specific member is part of.
            This endpoint allows you to get a list of teams based on the member's #if true
            unique identifier (memberId)
            and optionally include the members of those teams.
            If `includeMembers` is set to true, the response will include the members of each team.
            If `includeMembers` is false, the response will only include the team details without member information.
            If no teams are found for the given member ID, a 404 Not Found response will be returned.
            This endpoint is useful for members to view the teams they are part of and their members.
            It can also be used by administrators to manage teams based on their members.
            Authorization is not required for this endpoint, but it can be restricted to specific roles
            such as "Admin" or "Manager" if needed.
            Example usage:
            GET /teams/member?memberId=123e4567-e89b-12d3-a456-426614174000&amp;includeMembers=true
            This will return a list of teams that the member with ID `123e4567-e89b-12d3-a456-426614174000` is part of.
            </summary>
            <param name="memberId"></param>
            <param name="includeMembers"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.AddTeamMember(System.Guid)">
            <summary>
            Adds a new member to the team.
            This endpoint allows an administrator or team manager to add a new member to a specific team.
            If the member with the specified ID does not exist, a 404 Not Found response will be returned.
            If the addition is successful, a 201 Created response with the team details will be returned.
            This endpoint is useful for managing team memberships and ensuring that teams are up-to-date with their members.
            Authorization is required for this endpoint, typically restricted to users with the "Admin" or "Manager" role.
            Example usage:
            POST /teams/member?memberId=123e4567-e89b-12d3-a456-426614174000
            where `memberId` is the unique identifier of the member to be added to the team.
            The request will create a new team member and associate them with the team.
            </summary>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.CreateTeam(Teams.APP.Layer.CQRS.Commands.CreateTeamCommand)">
            <summary>
            Creates a new team with the specified details.
            This endpoint allows an administrator or team manager to create a new team in the system.
            If the creation is successful, a 201 Created response with the created team details will be returned.
            If the request data is invalid, a 400 Bad Request response with validation          errors will be returned.
            This endpoint is useful for managing teams, allowing users to organize members into specific groups.
            Authorization is required for this endpoint, typically restricted to users with the "Admin" or "Manager" role.
            Example usage:
            POST /teams
            {
              "Name": "Development Team",
              "MembersId": ["123e4567-e89b-12d3-a456-426614174000", "123e4567-e89b-12d3-a456-426614174001"],
              "TeamManagerId": "123e4567-e89b-12d3-a456-426614174002"
            }
            The request body should contain the team name, a list of member IDs, and the team manager ID.
            The `teamManagerId` should be a valid user ID of a user who will manage the team.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.UpdateTeamById(System.Guid,Teams.APP.Layer.CQRS.Commands.UpdateTeamCommand,System.Threading.CancellationToken)">
            <summary>
            Updates an existing team by its unique identifier.
            This endpoint allows an administrator or team manager to modify the details of a specific team.
            If the team with the specified ID does not exist, a 404 Not Found response will be returned.
            If the update is successful, a 200 OK response with the updated team details will be returned.
            This endpoint is useful for managing team information, such as changing the team name,
            updating team members, or changing the team manager.
            Authorization is required for this endpoint, typically restricted to users with the "Admin" or "Manager" role.
            Example usage:
            PUT /teams/{teamId}
            {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Updated Team Name",
              "memberId": ["123e4567-e89b-12d3-a456-426614174001", "123e4567-e89b-12d3-a456-426614174002"],
              "teamManagerId": "123e4567-e89b-12d3-a456-426614174003"
            }
            where `teamId` is the unique identifier of the team to be updated.
            The request body should contain the updated team details, including the team ID, name,
            member IDs, and the team manager ID.
            </summary>
            <param name="teamId"></param>
            <param name="command"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.DeleteTeamMemberById(Teams.API.Layer.DTOs.DeleteTeamMemberDto)">
            <summary>
            Deletes a team member by their unique identifier and the name of the team.
            This endpoint allows an administrator or team manager to remove a member from a specific team.
            If the member with the specified ID does not exist in the team, a 404 Not Found response will be returned.
            If the deletion is successful, a 204 No Content response will be returned.
            This endpoint is useful for managing team memberships and ensuring that only active members are retained in the team.
            Authorization is required for this endpoint, typically restricted to users with the "Admin" or "Manager" role.
            Example usage:
            DELETE /teams/member
            {
              "memberId": "123e4567-e89b-12d3-a456-426614174000",
              "teamName": "Development Team"
            }
            where `memberId` is the unique identifier of the member to be deleted and `teamName` is the name of the team from which the member will be removed.
            </summary>
            <param name="deleteTeamMemberDto"></param>
            <returns></returns>
        </member>
        <member name="M:Teams.API.Layer.Controllers.TeamController.DeleteTeam(System.Guid)">
            <summary>
            Deletes a team by its unique identifier.
            This endpoint allows an administrator to delete a team from the system.
            If the team with the specified ID does not exist, a 404 Not Found response will be returned.
            If the deletion is successful, a 204 No Content response will be returned.
            This endpoint is useful for managing teams and ensuring that only active teams are retained in the system.
            Authorization is required for this endpoint, typically restricted to users with the "Admin" role.
            Example usage:
            DELETE /teams/{teamId}
            where `{teamId}` is the unique identifier of the team to be deleted.
            </summary>
            <param name="teamId"></param>
            <returns></returns>
        </member>
        <member name="P:Teams.APP.Layer.CQRS.Queries.GetAllTeamsQuery.Id">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetAllTeamsQuery"/> class.
            </summary>
            <remarks>
            This constructor is parameterless and is used for deserialization purposes.
            It allows the MediatR library to create instances of this query without requiring any parameters.
            </remarks>
        </member>
        <member name="M:Teams.APP.Layer.CQRS.Queries.GetTeamQuery.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetTeamQuery"/> class with the specified team identifier.
            </summary>
            <param name="identifier">The unique identifier of the team to retrieve.</param>
        </member>
        <member name="M:Teams.APP.Layer.CQRS.Queries.GetTeamsByManagerQuery.#ctor(System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetTeamsByManagerQuery"/> class with the specified team identifier.
            </summary>
            <param name="TeamManagerId">The unique identifier of the team manager to retrieve.</param>
            <param name="includeMembers">Whether to include team members in the result.</param>
        </member>
        <member name="M:Teams.APP.Layer.CQRS.Queries.GetTeamsByMemberQuery.#ctor(System.Guid,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Teams.APP.Layer.CQRS.Queries.GetTeamsByMemberQuery"/> class with the specified team identifier.
            </summary>
            <param name="MemberId">The unique identifier of the team manager to retrieve.</param>
            <param name="includeMembers">Whether to include team members in the result.</param>
        </member>
        <member name="T:Teams.APP.Layer.Exceptions.ServicesException">
            <summary>
            Exception levée lors de défaillances techniques ou d'intégration (ex: service externe, infra).
            </summary>
        </member>
        <member name="M:Teams.APP.Layer.Exceptions.ServicesException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructeur simplifié par défaut (status = 400)
            </summary>
        </member>
        <member name="M:Teams.APP.Layer.Exceptions.ServicesException.#ctor(System.String,System.String)">
            <summary>
            Exception spécifique à l'indisponibilité d'un service externe.
            </summary>
        </member>
        <member name="T:Teams.CORE.Layer.Entities.TeamState">
            <summary>
            Active       : Équipe ayant au moins deux membres et un manager.
            Incomplete   : Équipe constituée mais sans projet affecté.
            Complete     : Équipe active et associée à un projet.
            Suspendue    : Équipe active dont le projet est suspendu.
            EnRevision   : Équipe suspendue en cours d’évaluation pour réaffectation.
            ADesaffecter : Équipe non réaffectée à son projet initial après révision.
            Archivee     : Équipe restée incomplète pendant 15 jours.
            </summary>
        </member>
        <member name="F:Teams.INFRA.Layer.ExternalServices.RabbitListenerService._connection">
            Member to Add    | 12345678-90ab-cdef-1234-567890abcdef | Pentester
                    Member to delete | 12345678-90ab-cdef-1234-567890abcdef | Pentester
                    Project Affected
                *
        </member>
        <member name="M:Teams.INFRA.Layer.ExternalServices.RabbitListenerService.GuidAndTeamRegex">
            <remarks>
            Pattern:<br/>
            <code>\\|\\s*([\\da-f]{8}(-[\\da-f]{4}){3}-[\\da-f]{12})\\s*\\|\\s*(.+)</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '|'.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [A-Fa-f\d] exactly 8 times.<br/>
                ○ Loop exactly 3 times.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match '-'.<br/>
                        ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
                ○ Match '-'.<br/>
                ○ Match a character in the set [A-Fa-f\d] exactly 12 times.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match '|'.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ 3rd capture group.<br/>
                ○ Match a character other than '\n' atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Teams.INFRA.Layer.ExternalServices.TeamExternalService.RetrieveNewMemberToAddInRedisAsync">
                https://jsonbin.io/quick-store/
                {
                    "MemberTeamId": "12345678-90ab-cdef-1234-567890abcdef",
                    "SourceTeam": "Equipe de sécurité (Security Team)",
                    "DestinationTeam": "Pentester",
                    "AffectationStatus": {
                        "IsTransferAllowed": true,
                        "LeaveDate": "2025-07-03T12:34:56Z"
                  }
                }
            
                {
                    "TeamManagerId": "c5b8e9b6-4a19-4a53-a41e-8b6f4d1a5d74",
                    "TeamName": "Pentester",
                    "ProjectStartDate": "2025-07-20T10:00:00Z",
                    "ProjectState": {
                        "State": "Active"
                    }
                }
            
                *
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GuidAndTeamRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidAndTeamRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
