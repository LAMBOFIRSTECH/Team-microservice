openapi: "3.0.3"
info:
  title: Team Management API
  version: "3.2.1"
servers:
  - url: https://localhost:8181
paths:
  /teams:
    get:
      summary: Récupère toutes les équipes
      description: >
        Renvoie la liste complète des équipes, avec leurs membres et managers.
      responses:
        '200':
          description: Liste des équipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'
    post:
      summary: Crée une nouvelle équipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamCommand'
      responses:
        '201':
          description: Équipe créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /teams/{teamId}:
    get:
      summary: Récupère une équipe par son ID
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            format: uuid
          required: true
          description: ID unique de l'équipe
      responses:
        '200':
          description: Équipe trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '404':
          description: Équipe non trouvée
    put:
      summary: Met à jour une équipe par son ID
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            format: uuid
          required: true
          description: ID unique de l'équipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamCommand'
      responses:
        '200':
          description: Équipe mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: Erreur de validation ou ID incohérent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '404':
          description: Équipe non trouvée
    delete:
      summary: Supprime une équipe par son ID
      parameters:
        - in: path
          name: teamId
          schema:
            type: string
            format: uuid
          required: true
          description: ID unique de l'équipe
      responses:
        '204':
          description: Équipe supprimée
        '404':
          description: Équipe non trouvée

  /teams/manager:
    get:
      summary: Récupère les équipes par ID de manager
      parameters:
        - in: query
          name: managerId
          schema:
            type: string
            format: uuid
          required: true
          description: ID du manager
        - in: query
          name: includeMembers
          schema:
            type: boolean
          required: false
          description: Inclure les membres des équipes
      responses:
        '200':
          description: Liste des équipes gérées
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'
        '404':
          description: Aucune équipe trouvée pour ce manager
    patch:
      summary: Change le manager d'une équipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamManagerCommand'
      responses:
        '204':
          description: Manager changé avec succès
        '400':
          description: Erreur de validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '404':
          description: Équipe ou manager non trouvé
        '500':
          description: Erreur serveur interne

  /teams/member:
    get:
      summary: Récupère les équipes par ID de membre
      parameters:
        - in: query
          name: memberId
          schema:
            type: string
            format: uuid
          required: true
          description: ID du membre
        - in: query
          name: includeMembers
          schema:
            type: boolean
          required: false
          description: Inclure les membres des équipes
      responses:
        '200':
          description: Liste des équipes du membre
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'
        '404':
          description: Aucune équipe trouvée pour ce membre
    patch:
      summary: Ajoute un membre à une équipe
      parameters:
        - in: query
          name: memberId
          schema:
            type: string
            format: uuid
          required: true
          description: ID du membre à ajouter
      responses:
        '204':
          description: Membre ajouté avec succès
        '400':
          description: Requête invalide (ex  memberId vide)
        '404':
          description: Membre non trouvé
        '500':
          description: Erreur serveur interne
    delete:
      summary: Supprime un membre d'une équipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTeamMemberDto'
      responses:
        '204':
          description: Membre supprimé avec succès
        '400':
          description: Requête invalide
        '404':
          description: Membre ou équipe non trouvée

components:
  schemas:
    TeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        members:
          type: array
          items:
            type: string
            format: uuid
        teamManagerId:
          type: string
          format: uuid
      required:
        - id
        - name
        - members
        - teamManagerId

    CreateTeamCommand:
      type: object
      properties:
        name:
          type: string
        membersId:
          type: array
          items:
            type: string
            format: uuid
        teamManagerId:
          type: string
          format: uuid
      required:
        - name
        - teamManagerId

    UpdateTeamCommand:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        memberId:
          type: array
          items:
            type: string
            format: uuid
        teamManagerId:
          type: string
          format: uuid
      required:
        - id
        - name
        - teamManagerId

    UpdateTeamManagerCommand:
      type: object
      properties:
        name:
          type: string
        oldTeamManagerId:
          type: string
          format: uuid
        newTeamManagerId:
          type: string
          format: uuid
      required:
        - name
        - oldTeamManagerId
        - newTeamManagerId

    DeleteTeamMemberDto:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
        teamName:
          type: string
      required:
        - memberId
        - teamName

    ValidationErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
      required:
        - errors
