openapi: 3.0.3
info:
  title: Team API
  description: API for managing teams, their members, and managers.
  version: 2.1.1
servers:
  - url: /teams
    description: Base URL for Teams API

paths:

  /:
    get:
      summary: Retrieve all teams
      description: |
        - Retrieves all teams in the system.
        - Returns a list of all teams with details such as team name, members, and team manager.
        - Returns an empty list if no teams exist.
        - Authorization is not required.
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'

    post:
      summary: Create a new team
      description: |
        - Creates a new team with specified details.
        - Requires team name, member IDs, and a team manager ID.
        - Returns the created team.
        - Validation errors result in 400 Bad Request.
        - Authorization is typically required (Admin/Manager).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamCommand'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '400':
          description: Invalid input / validation error

  /{teamId}:
    get:
      summary: Retrieve a team by ID
      description: |
        - Retrieves details of a specific team by its unique identifier.
        - Returns 404 if team not found.
      parameters:
        - name: teamId
          in: path
          required: true
          description: Unique ID of the team
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'
        '404':
          description: Team not found

    put:
      summary: Update a team by ID
      description: |
        - Updates details of an existing team identified by `teamId`.
        - Request body must contain matching team ID.
        - Returns updated team on success.
        - Validation errors or mismatched IDs result in 400 Bad Request.
        - Returns 404 if team not found.
        - Authorization typically required.
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Unique ID of the team to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamCommand'
      responses:
        '200':
          description: Updated team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamRequestDto'
        '400':
          description: Validation error or ID mismatch
        '404':
          description: Team not found

    delete:
      summary: Delete a team by ID
      description: |
        - Deletes a team from the system by its unique identifier.
        - Returns 204 No Content on success.
        - Returns 404 if team not found.
        - Authorization typically required (Admin).
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Unique ID of the team to delete
      responses:
        '204':
          description: Team deleted successfully
        '404':
          description: Team not found

  /manager:
    get:
      summary: Retrieve teams by manager ID
      description: |
        - Retrieves all teams managed by a specific manager.
        - Optionally includes team members.
        - Returns 404 if no teams found for the manager.
        - Authorization not required.
      parameters:
        - name: managerId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Manager's unique identifier
        - name: includeMembers
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to include team members in response (default false)
      responses:
        '200':
          description: List of teams managed by the manager
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'
        '404':
          description: No teams found for the manager

  /member:
    get:
      summary: Retrieve teams by member ID
      description: |
        - Retrieves all teams that a specific member belongs to.
        - Optionally includes team members.
        - Returns 404 if no teams found for the member.
        - Authorization not required.
      parameters:
        - name: memberId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Member's unique identifier
        - name: includeMembers
          in: query
          required: false
          schema:
            type: boolean
          description: Whether to include team members in response (default false)
      responses:
        '200':
          description: List of teams the member belongs to
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'
        '404':
          description: No teams found for the member

    patch:
      summary: Add a new member to a team
      description: |
        - Adds a new member to a team.
        - Requires memberId as query parameter.
        - Returns 204 No Content on success.
        - Returns 404 if member not found.
        - Authorization required (Admin/Manager).
      parameters:
        - name: memberId
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Unique identifier of the member to add
      responses:
        '204':
          description: Member added successfully
        '400':
          description: Bad request
        '404':
          description: Member not found
        '500':
          description: Internal server error

    delete:
      summary: Remove a member from a team
      description: |
        - Deletes a team member by member ID and team name.
        - Returns 204 No Content on success.
        - Returns 404 if member or team not found.
        - Authorization required (Admin/Manager).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTeamMemberDto'
      responses:
        '204':
          description: Member removed from team successfully
        '400':
          description: Bad request (missing data)
        '404':
          description: Member or team not found

components:
  schemas:

    TeamDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the team
        name:
          type: string
          description: Name of the team
        members:
          type: array
          description: List of team members
          items:
            $ref: '#/components/schemas/MemberDto'
        teamManagerId:
          type: string
          format: uuid
          description: User ID of the team manager
      required:
        - id
        - name
        - teamManagerId

    TeamRequestDto:
      allOf:
        - $ref: '#/components/schemas/TeamDto'
        - type: object
          properties:
            memberId:
              type: array
              items:
                type: string
                format: uuid
              description: List of member IDs

    MemberDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the member
        name:
          type: string
          description: Full name of the member

    CreateTeamCommand:
      type: object
      properties:
        name:
          type: string
          description: Name of the new team
        memberId:
          type: array
          items:
            type: string
            format: uuid
          description: List of member IDs to include in the team
        teamManagerId:
          type: string
          format: uuid
          description: User ID of the team manager
      required:
        - name
        - teamManagerId

    UpdateTeamCommand:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the team to update
        name:
          type: string
          description: Updated team name
        memberId:
          type: array
          items:
            type: string
            format: uuid
          description: Updated list of member IDs
        teamManagerId:
          type: string
          format: uuid
          description: Updated user ID of the team manager
      required:
        - id
        - name
        - teamManagerId

    DeleteTeamMemberDto:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          description: Unique identifier of the member to delete
        teamName:
          type: string
          description: Name of the team to remove the member from
      required:
        - memberId
        - teamName
