######## VARIABLES ########
variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: "1"
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "1"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  SONARQUBE_CONF_DIR: "${CI_PROJECT_DIR}/.sonarqube/conf"
  COVERAGE_REPORT_PATH: "$CI_PROJECT_DIR/TestResults/coverage.opencover.xml"
  BUILD_CONFIGURATION: "Release"
  GIT_STRATEGY: clone
  GIT_CHECKOUT: "true"
  NUGET_PACKAGES_DIRECTORY: "$CI_PROJECT_DIR/.nuget/packages"
  GITLAB_PACKAGE_REGISTRY_USERNAME: "gitlab-ci-token"
  GITLAB_PACKAGE_REGISTRY_PASSWORD: "$CI_JOB_TOKEN"
  TRIGGER_ROLLBACK_URL: ""

default:
  tags:
    - gitlab-lamboft-docker-runner

######## CACHE ########
cache:
  key: "clean-cache-$CI_COMMIT_REF_SLUG"
  paths:
    - "$NUGET_PACKAGES_DIRECTORY"
    - "TestResults/"
    - "bin/"
    - "obj/"
  policy: pull-push

######## STAGES ########
stages:
  - pre-treatment
  - build
  - test
  - scan-vulnerabilities
  - sonar-build-and-analysis
  - deploy
  - health-check
  - rollback
  - cleanup

######## PRE-TREATMENT ########
pre-treatment:
  stage: pre-treatment
  script:
    - echo "Nettoyage initial..."
    - git fetch --all
    - git reset --hard $CI_COMMIT_SHA
    - rm -rf **/bin/ **/obj/ **/TestResults/ .vscode/
  artifacts:
    expire_in: 20 minutes

######## BUILD ########
build:
  stage: build
  script:
    - SOLUTION_FILE=$(ls *.sln)
    - dotnet restore "$SOLUTION_FILE" --configfile "$CI_PROJECT_DIR/NuGet.Config" --packages "$NUGET_PACKAGES_DIRECTORY"
    - echo "Compilation du projet..."
    - dotnet build "$SOLUTION_FILE" --configuration $BUILD_CONFIGURATION
  artifacts:
    expire_in: 10 minutes

######## TEST ########
test:
  stage: test
  script:
    - echo "Exécution des tests unitaires avec couverture"
    - TEST_PROJECT=$(find . -name "*.Tests.csproj" )
    - dotnet test $TEST_PROJECT --configuration $BUILD_CONFIGURATION /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$COVERAGE_REPORT_PATH
  artifacts:
    paths:
      - TestResults/
    expire_in: 10 minutes

######## SCAN VULNERABILITÉS + DOCKER BUILD ########
scan-vulnerabilities:
  stage: scan-vulnerabilities
  image: aquasec/trivy:latest
  tags:
    - gitlab-lamboft-shell-develop
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  script:
    - tag=$(./image_tag.sh | tr -d '\n')
    - echo "DOCKER_TAG=$tag" > .env.ci
    - echo "CERT_PASSWORD=lambo" >> .env.ci
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$tag .
    - mkdir -p TRIVY_DIR
    - dotnet list package --vulnerable || true
    - trivy image --exit-code 0 --severity HIGH,CRITICAL $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$tag --format json --output "TRIVY_DIR/trivy_docker_image.json"
    - trivy fs ./ --format json --output "TRIVY_DIR/trivy_scan_report.json"
    - chmod +x trivy.sh && ./trivy.sh
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$tag
    - echo "$tag" > .docker_tag
  artifacts:
    paths:
      - .env.ci
      - .docker_tag
    expire_in: 10 minutes

######## SONARQUBE ########
sonar-build-and-analysis:
  stage: sonar-build-and-analysis
  tags:
    - gitlab-lamboft-shell-develop
  script:
    - chmod +x sonar_check.sh && ./sonar_check.sh
    - chmod +x sonar_report.sh && ./sonar_report.sh
  dependencies:
    - scan-vulnerabilities
  cache:
    policy: pull-push
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - "$NUGET_PACKAGES_DIRECTORY"
      - ".sonarqube/"
      - "TestResults/"
  artifacts:
    paths:
      - ".sonarqube/"
    expire_in: 10 minutes

######## DEPLOY DEV ########
Env_dev:
  stage: deploy
  tags:
    - gitlab-lamboft-shell-develop
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  script:
    - source .env.ci
    - echo "DEVELOPMENT_TAG=true" >> build.env
    - docker rm -f dev-$CI_PROJECT_NAME || true
    - chmod +x vault_app_auth.sh && ./vault_app_auth.sh
    - export $(cat .env.ci | xargs)
    - nomad job run application.hcl
    - echo "$DOCKER_TAG" > .docker_tag
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - .docker_tag
    expire_in: 10 minutes

######## DEPLOY STAGING ########
Env_staging:
  stage: deploy
  tags:
    - gitlab-lamboft-shell-runner
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - PREVIOUS_TAG=$(cat .docker_tag || echo "none")
    - tag=$(./image_tag.sh | tr -cd '0-9.')
    - echo "$tag" > .docker_tag
    - echo "PREVIOUS_DOCKER_TAG=$PREVIOUS_TAG" > build.env
    - echo "DOCKER_TAG=$tag" >> .env.ci
    - echo "CERT_PASSWORD=lambo" >> .env.ci
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$tag .
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$tag
    - docker rm -f staging-$CI_PROJECT_NAME || true
    - export $(cat .env.ci | xargs)
    - nomad job run application.hcl
    - sleep 10
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - .docker_tag
      - .rollback_tag
    expire_in: 10 minutes

######## HEALTH CHECK ########
health_check:
  stage: health-check
  tags:
    - gitlab-lamboft-shell-runner
  needs: ["Env_dev"] # plus tard en staging
  script:
    - echo "Vérification de l'état de l'application sur $HEALTH_ENDPOINT..."
    - for i in {1..5}; do
      curl -fs $HEALTH_ENDPOINT && exit 0;
      echo "Health check failed, tentative $i...";
      sleep 5;
      done
    - echo "Health check échoué après 5 tentatives. Déclenchement du rollback."
    - echo "$PREVIOUS_DOCKER_TAG" > .rollback_tag
    - |
      if [ -n "$TRIGGER_ROLLBACK_URL" ]; then
        curl -X POST "$TRIGGER_ROLLBACK_URL"
      else
        echo "Aucune URL de trigger rollback définie. Rollback manuel nécessaire."
      fi
    - exit 1
  artifacts:
    paths:
      - .rollback_tag
    expire_in: 10 minutes
  allow_failure: false

######## ROLLBACK DEVELOP ########
rollback_dev:
  stage: rollback
  tags:
    - gitlab-lamboft-shell-runner
  rules:
    - when: manual
  script:
    - ROLLBACK_TAG=$(cat .rollback_tag || cat .docker_tag || echo "none")
    - if [ "$ROLLBACK_TAG" = "none" ]; then
      echo "Aucun tag trouvé pour rollback.";
      exit 1;
      fi
    - echo "Rollback vers l'image :$ROLLBACK_TAG"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$ROLLBACK_TAG
    - docker rm -f dev-$CI_PROJECT_NAME || true
    - echo "CERT_PASSWORD=lambo" > .env.rollback
    - echo "DOCKER_TAG=$ROLLBACK_TAG" >> .env.rollback
    - export $(cat .env.rollback | xargs)
    - nomad job run application.hcl
    - echo "Rollback terminé avec succès."

# -----------------------------
# Clean Up
# -----------------------------
cleanup:
  stage: cleanup
  tags:
    - gitlab-lamboft-shell-develop
  script:
    - echo "Nettoyage des fichiers temporaires..."
    - rm -rf **/bin/ **/obj/ TestResults/ .vscode/ .sonarqube/ .nuget/ *.md *.png sonar-report.json *.sh .git*
  when: always
  allow_failure: false
